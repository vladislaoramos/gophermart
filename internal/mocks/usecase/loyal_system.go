// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/vladislaoramos/gophermart/internal/entity"
)

// LoyalSystem is an autogenerated mock type for the LoyalSystem type
type LoyalSystem struct {
	mock.Mock
}

type LoyalSystem_Expecter struct {
	mock *mock.Mock
}

func (_m *LoyalSystem) EXPECT() *LoyalSystem_Expecter {
	return &LoyalSystem_Expecter{mock: &_m.Mock}
}

// CheckUser provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystem) CheckUser(_a0 context.Context, _a1 entity.UserAuth) (entity.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserAuth) entity.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.UserAuth) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystem_CheckUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUser'
type LoyalSystem_CheckUser_Call struct {
	*mock.Call
}

// CheckUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entity.UserAuth
func (_e *LoyalSystem_Expecter) CheckUser(_a0 interface{}, _a1 interface{}) *LoyalSystem_CheckUser_Call {
	return &LoyalSystem_CheckUser_Call{Call: _e.mock.On("CheckUser", _a0, _a1)}
}

func (_c *LoyalSystem_CheckUser_Call) Run(run func(_a0 context.Context, _a1 entity.UserAuth)) *LoyalSystem_CheckUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserAuth))
	})
	return _c
}

func (_c *LoyalSystem_CheckUser_Call) Return(_a0 entity.User, _a1 error) *LoyalSystem_CheckUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateUser provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystem) CreateUser(_a0 context.Context, _a1 entity.UserAuth) (entity.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserAuth) entity.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.UserAuth) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystem_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type LoyalSystem_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entity.UserAuth
func (_e *LoyalSystem_Expecter) CreateUser(_a0 interface{}, _a1 interface{}) *LoyalSystem_CreateUser_Call {
	return &LoyalSystem_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0, _a1)}
}

func (_c *LoyalSystem_CreateUser_Call) Run(run func(_a0 context.Context, _a1 entity.UserAuth)) *LoyalSystem_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserAuth))
	})
	return _c
}

func (_c *LoyalSystem_CreateUser_Call) Return(_a0 entity.User, _a1 error) *LoyalSystem_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBalance provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystem) GetBalance(_a0 context.Context, _a1 int) (entity.Balance, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.Balance
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Balance); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Balance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystem_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type LoyalSystem_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *LoyalSystem_Expecter) GetBalance(_a0 interface{}, _a1 interface{}) *LoyalSystem_GetBalance_Call {
	return &LoyalSystem_GetBalance_Call{Call: _e.mock.On("GetBalance", _a0, _a1)}
}

func (_c *LoyalSystem_GetBalance_Call) Run(run func(_a0 context.Context, _a1 int)) *LoyalSystem_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *LoyalSystem_GetBalance_Call) Return(_a0 entity.Balance, _a1 error) *LoyalSystem_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrderList provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystem) GetOrderList(_a0 context.Context, _a1 int) ([]entity.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, int) []entity.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystem_GetOrderList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderList'
type LoyalSystem_GetOrderList_Call struct {
	*mock.Call
}

// GetOrderList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *LoyalSystem_Expecter) GetOrderList(_a0 interface{}, _a1 interface{}) *LoyalSystem_GetOrderList_Call {
	return &LoyalSystem_GetOrderList_Call{Call: _e.mock.On("GetOrderList", _a0, _a1)}
}

func (_c *LoyalSystem_GetOrderList_Call) Run(run func(_a0 context.Context, _a1 int)) *LoyalSystem_GetOrderList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *LoyalSystem_GetOrderList_Call) Return(_a0 []entity.Order, _a1 error) *LoyalSystem_GetOrderList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWithdrawList provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystem) GetWithdrawList(_a0 context.Context, _a1 int) ([]entity.Withdraw, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entity.Withdraw
	if rf, ok := ret.Get(0).(func(context.Context, int) []entity.Withdraw); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Withdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystem_GetWithdrawList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawList'
type LoyalSystem_GetWithdrawList_Call struct {
	*mock.Call
}

// GetWithdrawList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *LoyalSystem_Expecter) GetWithdrawList(_a0 interface{}, _a1 interface{}) *LoyalSystem_GetWithdrawList_Call {
	return &LoyalSystem_GetWithdrawList_Call{Call: _e.mock.On("GetWithdrawList", _a0, _a1)}
}

func (_c *LoyalSystem_GetWithdrawList_Call) Run(run func(_a0 context.Context, _a1 int)) *LoyalSystem_GetWithdrawList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *LoyalSystem_GetWithdrawList_Call) Return(_a0 []entity.Withdraw, _a1 error) *LoyalSystem_GetWithdrawList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PingRepo provides a mock function with given fields: _a0
func (_m *LoyalSystem) PingRepo(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoyalSystem_PingRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingRepo'
type LoyalSystem_PingRepo_Call struct {
	*mock.Call
}

// PingRepo is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *LoyalSystem_Expecter) PingRepo(_a0 interface{}) *LoyalSystem_PingRepo_Call {
	return &LoyalSystem_PingRepo_Call{Call: _e.mock.On("PingRepo", _a0)}
}

func (_c *LoyalSystem_PingRepo_Call) Run(run func(_a0 context.Context)) *LoyalSystem_PingRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LoyalSystem_PingRepo_Call) Return(_a0 error) *LoyalSystem_PingRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

// UploadOrder provides a mock function with given fields: _a0, _a1, _a2
func (_m *LoyalSystem) UploadOrder(_a0 context.Context, _a1 int, _a2 string) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int, string) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystem_UploadOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadOrder'
type LoyalSystem_UploadOrder_Call struct {
	*mock.Call
}

// UploadOrder is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
//   - _a2 string
func (_e *LoyalSystem_Expecter) UploadOrder(_a0 interface{}, _a1 interface{}, _a2 interface{}) *LoyalSystem_UploadOrder_Call {
	return &LoyalSystem_UploadOrder_Call{Call: _e.mock.On("UploadOrder", _a0, _a1, _a2)}
}

func (_c *LoyalSystem_UploadOrder_Call) Run(run func(_a0 context.Context, _a1 int, _a2 string)) *LoyalSystem_UploadOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *LoyalSystem_UploadOrder_Call) Return(_a0 bool, _a1 error) *LoyalSystem_UploadOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Withdraw provides a mock function with given fields: _a0, _a1, _a2
func (_m *LoyalSystem) Withdraw(_a0 context.Context, _a1 int, _a2 entity.Withdrawal) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, entity.Withdrawal) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoyalSystem_Withdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Withdraw'
type LoyalSystem_Withdraw_Call struct {
	*mock.Call
}

// Withdraw is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
//   - _a2 entity.Withdrawal
func (_e *LoyalSystem_Expecter) Withdraw(_a0 interface{}, _a1 interface{}, _a2 interface{}) *LoyalSystem_Withdraw_Call {
	return &LoyalSystem_Withdraw_Call{Call: _e.mock.On("Withdraw", _a0, _a1, _a2)}
}

func (_c *LoyalSystem_Withdraw_Call) Run(run func(_a0 context.Context, _a1 int, _a2 entity.Withdrawal)) *LoyalSystem_Withdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(entity.Withdrawal))
	})
	return _c
}

func (_c *LoyalSystem_Withdraw_Call) Return(_a0 error) *LoyalSystem_Withdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewLoyalSystem interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoyalSystem creates a new instance of LoyalSystem. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoyalSystem(t mockConstructorTestingTNewLoyalSystem) *LoyalSystem {
	mock := &LoyalSystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
