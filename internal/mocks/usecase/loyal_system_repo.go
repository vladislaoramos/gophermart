// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/vladislaoramos/gophermart/internal/entity"
)

// LoyalSystemRepo is an autogenerated mock type for the LoyalSystemRepo type
type LoyalSystemRepo struct {
	mock.Mock
}

type LoyalSystemRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *LoyalSystemRepo) EXPECT() *LoyalSystemRepo_Expecter {
	return &LoyalSystemRepo_Expecter{mock: &_m.Mock}
}

// AddWithdrawal provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LoyalSystemRepo) AddWithdrawal(_a0 context.Context, _a1 int, _a2 string, _a3 float64) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, float64) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoyalSystemRepo_AddWithdrawal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWithdrawal'
type LoyalSystemRepo_AddWithdrawal_Call struct {
	*mock.Call
}

// AddWithdrawal is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
//   - _a2 string
//   - _a3 float64
func (_e *LoyalSystemRepo_Expecter) AddWithdrawal(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *LoyalSystemRepo_AddWithdrawal_Call {
	return &LoyalSystemRepo_AddWithdrawal_Call{Call: _e.mock.On("AddWithdrawal", _a0, _a1, _a2, _a3)}
}

func (_c *LoyalSystemRepo_AddWithdrawal_Call) Run(run func(_a0 context.Context, _a1 int, _a2 string, _a3 float64)) *LoyalSystemRepo_AddWithdrawal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string), args[3].(float64))
	})
	return _c
}

func (_c *LoyalSystemRepo_AddWithdrawal_Call) Return(_a0 error) *LoyalSystemRepo_AddWithdrawal_Call {
	_c.Call.Return(_a0)
	return _c
}

// CreateOrder provides a mock function with given fields: _a0, _a1, _a2
func (_m *LoyalSystemRepo) CreateOrder(_a0 context.Context, _a1 int, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoyalSystemRepo_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type LoyalSystemRepo_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
//   - _a2 string
func (_e *LoyalSystemRepo_Expecter) CreateOrder(_a0 interface{}, _a1 interface{}, _a2 interface{}) *LoyalSystemRepo_CreateOrder_Call {
	return &LoyalSystemRepo_CreateOrder_Call{Call: _e.mock.On("CreateOrder", _a0, _a1, _a2)}
}

func (_c *LoyalSystemRepo_CreateOrder_Call) Run(run func(_a0 context.Context, _a1 int, _a2 string)) *LoyalSystemRepo_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *LoyalSystemRepo_CreateOrder_Call) Return(_a0 error) *LoyalSystemRepo_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

// CreateUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *LoyalSystemRepo) CreateUser(_a0 context.Context, _a1 string, _a2 string) (entity.User, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entity.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystemRepo_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type LoyalSystemRepo_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *LoyalSystemRepo_Expecter) CreateUser(_a0 interface{}, _a1 interface{}, _a2 interface{}) *LoyalSystemRepo_CreateUser_Call {
	return &LoyalSystemRepo_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0, _a1, _a2)}
}

func (_c *LoyalSystemRepo_CreateUser_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *LoyalSystemRepo_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LoyalSystemRepo_CreateUser_Call) Return(_a0 entity.User, _a1 error) *LoyalSystemRepo_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateUserBalance provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystemRepo) CreateUserBalance(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoyalSystemRepo_CreateUserBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserBalance'
type LoyalSystemRepo_CreateUserBalance_Call struct {
	*mock.Call
}

// CreateUserBalance is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *LoyalSystemRepo_Expecter) CreateUserBalance(_a0 interface{}, _a1 interface{}) *LoyalSystemRepo_CreateUserBalance_Call {
	return &LoyalSystemRepo_CreateUserBalance_Call{Call: _e.mock.On("CreateUserBalance", _a0, _a1)}
}

func (_c *LoyalSystemRepo_CreateUserBalance_Call) Run(run func(_a0 context.Context, _a1 int)) *LoyalSystemRepo_CreateUserBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *LoyalSystemRepo_CreateUserBalance_Call) Return(_a0 error) *LoyalSystemRepo_CreateUserBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetBalance provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystemRepo) GetBalance(_a0 context.Context, _a1 int) (entity.Balance, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.Balance
	if rf, ok := ret.Get(0).(func(context.Context, int) entity.Balance); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Balance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystemRepo_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type LoyalSystemRepo_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *LoyalSystemRepo_Expecter) GetBalance(_a0 interface{}, _a1 interface{}) *LoyalSystemRepo_GetBalance_Call {
	return &LoyalSystemRepo_GetBalance_Call{Call: _e.mock.On("GetBalance", _a0, _a1)}
}

func (_c *LoyalSystemRepo_GetBalance_Call) Run(run func(_a0 context.Context, _a1 int)) *LoyalSystemRepo_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *LoyalSystemRepo_GetBalance_Call) Return(_a0 entity.Balance, _a1 error) *LoyalSystemRepo_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrderByOrderNumber provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystemRepo) GetOrderByOrderNumber(_a0 context.Context, _a1 string) (entity.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystemRepo_GetOrderByOrderNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderByOrderNumber'
type LoyalSystemRepo_GetOrderByOrderNumber_Call struct {
	*mock.Call
}

// GetOrderByOrderNumber is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *LoyalSystemRepo_Expecter) GetOrderByOrderNumber(_a0 interface{}, _a1 interface{}) *LoyalSystemRepo_GetOrderByOrderNumber_Call {
	return &LoyalSystemRepo_GetOrderByOrderNumber_Call{Call: _e.mock.On("GetOrderByOrderNumber", _a0, _a1)}
}

func (_c *LoyalSystemRepo_GetOrderByOrderNumber_Call) Run(run func(_a0 context.Context, _a1 string)) *LoyalSystemRepo_GetOrderByOrderNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LoyalSystemRepo_GetOrderByOrderNumber_Call) Return(_a0 entity.Order, _a1 error) *LoyalSystemRepo_GetOrderByOrderNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrderList provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystemRepo) GetOrderList(_a0 context.Context, _a1 int) ([]entity.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, int) []entity.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystemRepo_GetOrderList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderList'
type LoyalSystemRepo_GetOrderList_Call struct {
	*mock.Call
}

// GetOrderList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *LoyalSystemRepo_Expecter) GetOrderList(_a0 interface{}, _a1 interface{}) *LoyalSystemRepo_GetOrderList_Call {
	return &LoyalSystemRepo_GetOrderList_Call{Call: _e.mock.On("GetOrderList", _a0, _a1)}
}

func (_c *LoyalSystemRepo_GetOrderList_Call) Run(run func(_a0 context.Context, _a1 int)) *LoyalSystemRepo_GetOrderList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *LoyalSystemRepo_GetOrderList_Call) Return(_a0 []entity.Order, _a1 error) *LoyalSystemRepo_GetOrderList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserWithLogin provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystemRepo) GetUserWithLogin(_a0 context.Context, _a1 string) (entity.User, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystemRepo_GetUserWithLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserWithLogin'
type LoyalSystemRepo_GetUserWithLogin_Call struct {
	*mock.Call
}

// GetUserWithLogin is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *LoyalSystemRepo_Expecter) GetUserWithLogin(_a0 interface{}, _a1 interface{}) *LoyalSystemRepo_GetUserWithLogin_Call {
	return &LoyalSystemRepo_GetUserWithLogin_Call{Call: _e.mock.On("GetUserWithLogin", _a0, _a1)}
}

func (_c *LoyalSystemRepo_GetUserWithLogin_Call) Run(run func(_a0 context.Context, _a1 string)) *LoyalSystemRepo_GetUserWithLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LoyalSystemRepo_GetUserWithLogin_Call) Return(_a0 entity.User, _a1 error) *LoyalSystemRepo_GetUserWithLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWithdrawalList provides a mock function with given fields: _a0, _a1
func (_m *LoyalSystemRepo) GetWithdrawalList(_a0 context.Context, _a1 int) ([]entity.Withdraw, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []entity.Withdraw
	if rf, ok := ret.Get(0).(func(context.Context, int) []entity.Withdraw); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Withdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoyalSystemRepo_GetWithdrawalList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawalList'
type LoyalSystemRepo_GetWithdrawalList_Call struct {
	*mock.Call
}

// GetWithdrawalList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *LoyalSystemRepo_Expecter) GetWithdrawalList(_a0 interface{}, _a1 interface{}) *LoyalSystemRepo_GetWithdrawalList_Call {
	return &LoyalSystemRepo_GetWithdrawalList_Call{Call: _e.mock.On("GetWithdrawalList", _a0, _a1)}
}

func (_c *LoyalSystemRepo_GetWithdrawalList_Call) Run(run func(_a0 context.Context, _a1 int)) *LoyalSystemRepo_GetWithdrawalList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *LoyalSystemRepo_GetWithdrawalList_Call) Return(_a0 []entity.Withdraw, _a1 error) *LoyalSystemRepo_GetWithdrawalList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Ping provides a mock function with given fields: _a0
func (_m *LoyalSystemRepo) Ping(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoyalSystemRepo_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type LoyalSystemRepo_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *LoyalSystemRepo_Expecter) Ping(_a0 interface{}) *LoyalSystemRepo_Ping_Call {
	return &LoyalSystemRepo_Ping_Call{Call: _e.mock.On("Ping", _a0)}
}

func (_c *LoyalSystemRepo_Ping_Call) Run(run func(_a0 context.Context)) *LoyalSystemRepo_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LoyalSystemRepo_Ping_Call) Return(_a0 error) *LoyalSystemRepo_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateBalance provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *LoyalSystemRepo) UpdateBalance(_a0 context.Context, _a1 int, _a2 float64, _a3 float64) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float64, float64) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoyalSystemRepo_UpdateBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBalance'
type LoyalSystemRepo_UpdateBalance_Call struct {
	*mock.Call
}

// UpdateBalance is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
//   - _a2 float64
//   - _a3 float64
func (_e *LoyalSystemRepo_Expecter) UpdateBalance(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *LoyalSystemRepo_UpdateBalance_Call {
	return &LoyalSystemRepo_UpdateBalance_Call{Call: _e.mock.On("UpdateBalance", _a0, _a1, _a2, _a3)}
}

func (_c *LoyalSystemRepo_UpdateBalance_Call) Run(run func(_a0 context.Context, _a1 int, _a2 float64, _a3 float64)) *LoyalSystemRepo_UpdateBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(float64), args[3].(float64))
	})
	return _c
}

func (_c *LoyalSystemRepo_UpdateBalance_Call) Return(_a0 error) *LoyalSystemRepo_UpdateBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateOrderAccrual provides a mock function with given fields: _a0, _a1, _a2
func (_m *LoyalSystemRepo) UpdateOrderAccrual(_a0 context.Context, _a1 string, _a2 float64) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoyalSystemRepo_UpdateOrderAccrual_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderAccrual'
type LoyalSystemRepo_UpdateOrderAccrual_Call struct {
	*mock.Call
}

// UpdateOrderAccrual is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 float64
func (_e *LoyalSystemRepo_Expecter) UpdateOrderAccrual(_a0 interface{}, _a1 interface{}, _a2 interface{}) *LoyalSystemRepo_UpdateOrderAccrual_Call {
	return &LoyalSystemRepo_UpdateOrderAccrual_Call{Call: _e.mock.On("UpdateOrderAccrual", _a0, _a1, _a2)}
}

func (_c *LoyalSystemRepo_UpdateOrderAccrual_Call) Run(run func(_a0 context.Context, _a1 string, _a2 float64)) *LoyalSystemRepo_UpdateOrderAccrual_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(float64))
	})
	return _c
}

func (_c *LoyalSystemRepo_UpdateOrderAccrual_Call) Return(_a0 error) *LoyalSystemRepo_UpdateOrderAccrual_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateOrderStatus provides a mock function with given fields: _a0, _a1, _a2
func (_m *LoyalSystemRepo) UpdateOrderStatus(_a0 context.Context, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoyalSystemRepo_UpdateOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatus'
type LoyalSystemRepo_UpdateOrderStatus_Call struct {
	*mock.Call
}

// UpdateOrderStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *LoyalSystemRepo_Expecter) UpdateOrderStatus(_a0 interface{}, _a1 interface{}, _a2 interface{}) *LoyalSystemRepo_UpdateOrderStatus_Call {
	return &LoyalSystemRepo_UpdateOrderStatus_Call{Call: _e.mock.On("UpdateOrderStatus", _a0, _a1, _a2)}
}

func (_c *LoyalSystemRepo_UpdateOrderStatus_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *LoyalSystemRepo_UpdateOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *LoyalSystemRepo_UpdateOrderStatus_Call) Return(_a0 error) *LoyalSystemRepo_UpdateOrderStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewLoyalSystemRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewLoyalSystemRepo creates a new instance of LoyalSystemRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLoyalSystemRepo(t mockConstructorTestingTNewLoyalSystemRepo) *LoyalSystemRepo {
	mock := &LoyalSystemRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
